buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

plugins {
    id "java-library"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "signing"
    id "maven-publish"
}
apply plugin: "io.codearte.nexus-staging"

group = "io.github.rysefoxx"
description = "RyseInventory"
java.sourceCompatibility = JavaVersion.VERSION_1_8

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    version = "1.5.2"
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "com.github.johnrengelman.shadow"

    repositories {
        mavenLocal()
        mavenCentral()
    }
    java.sourceCompatibility = JavaVersion.VERSION_1_8

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

shadowJar {
    archiveClassifier.set("")
    mergeServiceFiles()
}

java {
    withSourcesJar()
    withJavadocJar()
}

signing {
    useGpgCmd()
    sign publishing.publications
}

publishing {
    publications {
        shadow(MavenPublication) {
            project.shadow.component(it)

            groupId = "io.github.rysefoxx"
            artifactId = "RyseInventory-Plugin"
            version = "${project.version}"

            artifact(javadocJar)
            artifact(sourcesJar)

            pom {
                name = "RyseInventory"
                packaging = "jar"
                description = "Inventory System"
                url = "https://github.com/Rysefoxx/RyseInventory"

                scm {
                    connection = SCM_CONNECTION
                    developerConnection = SCM_DEV_CONNECTION
                    url = SCM_URL
                }

                issueManagement {
                    system = "GitHub"
                    url = ISSUE_URL
                }

                licenses {
                    license {
                        name = "MIT License"
                        url = LICENSE_URL
                    }
                }

                developers {
                    developer {
                        id = "Rysefoxx"
                        name = "Rysefoxx"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            String snapshot = uri(OSSRH_SNAPSHOT)
            String release = uri(OSSRH_RELEASE)

            if (version.toString().endsWith("SNAPSHOT")) url = snapshot else url = release

            credentials {
                username = OSSRH_USERNAME
                password = OSSRH_PASSWORD
            }
        }
    }
}

nexusStaging {
    username = NEXUS_USERNAME
    password = NEXUS_PASSWORD
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
}